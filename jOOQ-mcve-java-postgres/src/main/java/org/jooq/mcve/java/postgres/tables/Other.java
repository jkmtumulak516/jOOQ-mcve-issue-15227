/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.postgres.Keys;
import org.jooq.mcve.java.postgres.Mcve;
import org.jooq.mcve.java.postgres.tables.records.OtherRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Other extends TableImpl<OtherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.other</code>
     */
    public static final Other OTHER = new Other();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtherRecord> getRecordType() {
        return OtherRecord.class;
    }

    /**
     * The column <code>mcve.other.id</code>.
     */
    public final TableField<OtherRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.other.cd</code>.
     */
    public final TableField<OtherRecord, Integer> CD = createField(DSL.name("cd"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mcve.other.test_id</code>.
     */
    public final TableField<OtherRecord, Integer> TEST_ID = createField(DSL.name("test_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Other(Name alias, Table<OtherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Other(Name alias, Table<OtherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mcve.other</code> table reference
     */
    public Other(String alias) {
        this(DSL.name(alias), OTHER);
    }

    /**
     * Create an aliased <code>mcve.other</code> table reference
     */
    public Other(Name alias) {
        this(alias, OTHER);
    }

    /**
     * Create a <code>mcve.other</code> table reference
     */
    public Other() {
        this(DSL.name("other"), null);
    }

    public <O extends Record> Other(Table<O> child, ForeignKey<O, OtherRecord> key) {
        super(child, key, OTHER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<OtherRecord, Integer> getIdentity() {
        return (Identity<OtherRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OtherRecord> getPrimaryKey() {
        return Keys.PK_OTHER;
    }

    @Override
    public List<ForeignKey<OtherRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OTHER__FK_OTHER_TEST);
    }

    private transient Test _test;

    /**
     * Get the implicit join path to the <code>mcve.test</code> table.
     */
    public Test test() {
        if (_test == null)
            _test = new Test(this, Keys.OTHER__FK_OTHER_TEST);

        return _test;
    }

    @Override
    public Other as(String alias) {
        return new Other(DSL.name(alias), this);
    }

    @Override
    public Other as(Name alias) {
        return new Other(alias, this);
    }

    @Override
    public Other as(Table<?> alias) {
        return new Other(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Other rename(String name) {
        return new Other(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Other rename(Name name) {
        return new Other(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Other rename(Table<?> name) {
        return new Other(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
